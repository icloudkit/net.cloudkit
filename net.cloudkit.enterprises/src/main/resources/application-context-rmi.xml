<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<description>Spring infrastructure config</description>

	<!--
	Spring 四种远程访问技术的支持：
	远程方法调用（RMI）。通过使用 RmiProxyFactoryBean 和 RmiServiceExporter，Spring同时支持传统的RMI（使用java.rmi.Remote接口和java.rmi.RemoteException）和通过RMI调用器实现的透明远程调用（支持任何Java接口）。
	Spring的HTTP调用器。Spring提供了一种允许通过HTTP进行Java串行化的特殊远程调用策略，它支持任意Java接口（就像RMI调用器）。相对应的支持类是 HttpInvokerProxyFactoryBean 和 HttpInvokerServiceExporter。
	Hessian。通过 HessianProxyFactoryBean 和 HessianServiceExporter，可以使用Caucho提供的基于HTTP的轻量级二进制协议来透明地暴露服务。
	Burlap。 Burlap是Caucho基于XML用来替代Hessian的项目。Spring提供了诸如 BurlapProxyFactoryBean 和 BurlapServiceExporter 的支持类。
	JAX RPC。Spring通过JAX-RPC（J2EE 1.4's wweb service API）为Web services提供远程服务支持。 org.springframework.remoting.jaxrpc.JaxRpcPortProxyFactoryBean
	JAX-WS. Spring通过(在Java EE 5和Java 6中引入的JAX-RPC继承)为远程Web Services提供支持。
	JMS. 通过JmsInvokerServiceExporter和JmsInvokerProxyFactoryBean使用JMS做为底层协议提供远程服务.
    -->
	<!--
	&lt;!&ndash; Secure Spring remoting:  Ensure any Spring Remoting method invocations &ndash;&gt;
	&lt;!&ndash; can be associated with a Subject for security checks. &ndash;&gt;
	<bean id="secureRemoteInvocationExecutor" class="org.apache.shiro.spring.remoting.SecureRemoteInvocationExecutor">
	    <property name="securityManager" ref="securityManager"/>
	</bean>
	<bean name="/someService" class="org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter">
	    <property name="service" ref="someService"/>
	    <property name="serviceInterface" value="net.cloudkit.ecological.enterprises.application.SomeService"/>
	    <property name="remoteInvocationExecutor" ref="secureRemoteInvocationExecutor"/>
	</bean>

	<bean id="urlMapping"
         class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
         <property name="mappings">
             <props>
                 <prop key="/someService">serviceExporter</prop>
             </props>
         </property>
     </bean>

	<bean id="secureRemoteInvocationFactory" class="org.apache.shiro.spring.remoting.SecureRemoteInvocationFactory"/>

	<bean id="someService" class="org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean">
	    &lt;!&ndash; http://127.0.0.1:8080/httpinvoke/someService &ndash;&gt;
	    <property name="serviceUrl" value="http://host:port/remoting/someService"/>
	    <property name="serviceInterface" value="net.cloudkit.ecological.enterprises.application.SomeService"/>
	    <property name="remoteInvocationFactory" ref="secureRemoteInvocationFactory"/>
	</bean>
	-->

    <bean id="registry" class="org.springframework.remoting.rmi.RmiRegistryFactoryBean">
		<!--<property name="alwaysCreate" value="true" />-->
		<!--<property name="host" value="127.0.0.1" />-->
		<property name="port" value="1099" />
	</bean>

    <!--
    public class RMICustomClientSocketFactory implements RMIClientSocketFactory {
        private int timeout;

        public void setTimeout(int timeout) {
            this.timeout = timeout;
        }

        public Socket createSocket(String host, int port) throws IOException {
            Socket socket = new Socket(host, port);
            socket.setSoTimeout(timeout);
            return socket;
        }
    }
    -->
	<bean class="org.springframework.remoting.rmi.RmiProxyFactoryBean" lazy-init="true">
		<property name="serviceUrl" value="${rmi.services_url_prefix}MemberRemoteService" />
		<property name="serviceInterface" value="net.cloudkit.enterprises.interfaces.member.remoting.MemberRemoteService" />
		<!-- 启动时检查连接，默认true invokeTimeout -->
		<property name="lookupStubOnStartup" value="false" />
		<!-- 失败时刷新Stub, 默认 false -->
		<!-- RMI stub被连接到特定的端点，不仅仅是为每个调用打开一个给定的目标地址的连接，所以如果重新启动RMI端点主机的服务器，那么就需要重新注册这些stub，并且客户端需要再次查询它们 -->
		<!-- 调用失败，并且连接异常的话，将它设定为true来强制重新自动查询stub -->
		<property name="refreshStubOnConnectFailure" value="true" />
		<!-- 缓存Stub(生产环境对性能影响大)，可不填，默认true -->
		<!-- 设置为false的时候，禁止stub的缓存，生产环境中必需开启否则影响性能 -->
		<property name="cacheStub" value="true" />
        <!-- registryClientSocketFactory : 客户端与服务端创建SOCKECT的一个工厂 RMIClientSocketFactory -->
        <!--<property name="registryClientSocketFactory" ref="" />-->
	</bean>

	<bean class="org.springframework.remoting.rmi.RmiServiceExporter"  lazy-init="true">
		<property name="serviceName" value="MemberRemoteService" />
		<property name="service" ref="memberRemoteService" />
		<property name="serviceInterface" value="net.cloudkit.enterprises.interfaces.member.remoting.MemberRemoteService" />
		<property name="registry" ref="registry"/>
	</bean>

</beans>
