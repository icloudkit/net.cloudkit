<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd"
       default-lazy-init="false">
    <!--  default-autowire="byName" -->

    <description>Quartz的Cron式执行任务配置</description>

    <!-- Quartz本地Schduler -->
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <!--<property name="configLocation" value="classpath:quartz.properties" />-->
        <property name="dataSource" ref="quartzDataSource" />
        <!--<property name="overwriteExistingJobs" value="true" />-->
        <property name="autoStartup" value="true" />
        <!-- Triggers集成 -->
        <property name="triggers">
            <list>
                <ref bean="someCronTrigger" />
                <ref bean="some2CronTrigger" />
            </list>
        </property>
        <!-- Quartz配置, 本地运行无需单独的quartz.properties文件，在此简单配置即可 -->
        <!-- Quartz配置文件路径, 指向cluster配置 -->
        <!--<property name="configLocation" value="classpath:schedule/quartz-cluster.properties" />-->
        <property name="quartzProperties">
            <props>
                <prop key="org.quartz.scheduler.instanceName">DataScheduler</prop>
                <prop key="org.quartz.scheduler.instanceId">AUTO</prop>
                <prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
                <prop key="org.quartz.threadPool.threadCount">5</prop>
                <prop key="org.quartz.threadPool.threadPriority">5</prop>
                <prop key="org.quartz.jobStore.misfireThreshold">60000</prop>
                <prop key="org.quartz.jobStore.class">org.springframework.scheduling.quartz.LocalDataSourceJobStore</prop>
                <prop key="org.quartz.jobStore.tablePrefix">QRTZ_</prop>
                <prop key="org.quartz.jobStore.isClustered">true</prop>
                <prop key="org.quartz.jobStore.useProperties">false </prop>
            </props>
        </property>
        <!-- 启动时延期2秒开始任务 -->
        <!--<property name="startupDelay" value="2" />-->
        <!-- Job接受applicationContext的成员变量名 -->
        <property name="applicationContextSchedulerContextKey" value="applicationContext" />
    </bean>

    <!-- Cron式Trigger定义 -->
    <bean id="someCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="someCronJobDetail" />
        <!-- 周一至五,朝九晚五工作时间内每半小时执行一次-->
        <!--<property name="cronExpression" value="0 0/30 9-17 ? * MON-FRI" />-->
        <property name="cronExpression" value="0 0/30 * ? * *" />
        <!-- 调度工厂实例化后，经过0秒开始执行调度 -->
        <property name="startDelay" value="0" />
    </bean>

    <!--
    &lt;!&ndash; JobDetajil, 基于MethodInvokingJobDetailFactoryBean调用普通Spring Bean &ndash;&gt;
    <bean id="cronJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        &lt;!&ndash; 同一任务在前一次执行未完成而Trigger时间又到时是否并发开始新的执行, 默认为true. &ndash;&gt;
        <property name="concurrent" value="true" />
        <property name="targetObject" ref="testJob" />
        <property name="targetMethod" value="execute" />
    </bean>
    -->

    <bean name="someCronJobDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="net.cloudkit.enterprises.infrastructure.scheduling.SomeJob" />
        <property name="group" value="MY_JOBS_GROUP" />
        <property name="durability" value="true" />
    </bean>


    <!-- Cron式Trigger定义 -->
    <bean id="some2CronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="someCronJobDetail" />
        <!-- 周一至五,朝九晚五工作时间内每半小时执行一次-->
        <!--<property name="cronExpression" value="0 0/30 9-17 ? * MON-FRI" />-->
        <property name="cronExpression" value="0 0/30 * ? * *" />
        <!-- 调度工厂实例化后，经过0秒开始执行调度 -->
        <property name="startDelay" value="0" />
    </bean>

    <!-- Timer式 Trigger定义-->
    <!--
    <bean id="some2CronTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
        <property name="jobDetail" ref="some2CronJobDetail" />
        &lt;!&ndash; 每次执行间隔5分钟 &ndash;&gt;
        <property name="repeatInterval" value="300000" />
    </bean>
    -->

    <!-- JobDetail, 基于JobDetailBean实例化Job Class,可持久化到数据库实现集群 -->
    <bean name="some2CronJobDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="durability" value="true"/>
        <property name="jobClass" value="net.cloudkit.enterprises.infrastructure.scheduling.SomeJob2" />
        <property name="jobDataAsMap">
            <map>
                <entry key="timeout" value="0" />
            </map>
        </property>
    </bean>

    <!-- Job的可配置属性,在job中通过applicationContext动态获取 -->
    <!--
    <util:map id="jobConfig">
        <entry key="nodeName" value="${server.cluster_name}" />
    </util:map>
    -->


    <beans profile="production">
        <!-- Spring Simple连接池 for quartz -->
        <bean id="quartzDataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
            <property name="driverClass" value="${quartz.jdbc.driver}" />
            <property name="url" value="${quartz.jdbc.url}" />
            <property name="username" value="${quartz.jdbc.username}" />
            <property name="password" value="${quartz.jdbc.password}" />
        </bean>
    </beans>

    <beans profile="development, functional, test">
        <!-- Spring Simple连接池 for quartz -->
        <bean id="quartzDataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
            <property name="driverClass" value="${quartz.jdbc.driver}" />
            <property name="url" value="${quartz.jdbc.url}" />
            <property name="username" value="${quartz.jdbc.username}" />
            <property name="password" value="${quartz.jdbc.password}" />
        </bean>

        <!-- 初始化数据结构与默认数据 -->
        <jdbc:initialize-database data-source="quartzDataSource" ignore-failures="ALL">
            <jdbc:script location="classpath:data/quartz_tables_h2.sql" encoding="UTF-8" />
        </jdbc:initialize-database>
    </beans>

    <!--
    <jdbc:initialize-database data-source="dataSource" enabled="false" ignore-failures="NONE">
		<jdbc:script location="classpath:data/data.sql" encoding="UTF-8" execution="DESTROY" />
	</jdbc:initialize-database>
    -->

    <!--
    <bean id="testCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="jobDetail" />
        <property name="cronExpression" value="0/10 * * ? * *" />
    </bean>

    <bean name="jobDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="net.cloudkit.ecological.enterprises.infrastructure.scheduling.SomeJob" />
        <property name="group" value="MY_JOBS_GROUP" />
        <property name="name" value="TEST_JOB" />
        <property name="durability" value="true" />
    </bean>
    -->

</beans>
