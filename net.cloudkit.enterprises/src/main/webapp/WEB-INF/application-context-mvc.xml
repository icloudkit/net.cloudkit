<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- Srping MVC配置 dispatcher-servlet -->

    <!-- classpath*:environment.properties, classpath*:META-INF/environment.properties, /WEB-INF/environment.properties -->
    <context:property-placeholder location="classpath*:environment.properties" ignore-resource-not-found="true" ignore-unresolvable="true" />

    <!-- Spring3.1之前的注解 HandlerMapping -->
    <!--
    # 把请求的URL映射到Controller的name上面
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"/>
    # 启动Spring MVC的注解功能，完成请求和注解POJO
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/>
    -->

    <!-- Spring3.1开始的版本，建议使用RequestMappingHandlerMapping和RequestMappingHandlerAdapter -->
    <!--把请求的URL映射到Controller的name上面 -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" />
    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO -->
    <!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" />-->
    <!--
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" p:ignoreDefaultModelOnRedirect="true">
        <property name="messageConverters">
            <list>
                &lt;!&ndash;<bean class="org.springframework.http.converter.json.GsonHttpMessageConverter" />&ndash;&gt;
                <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                    &lt;!&ndash;<property name="objectMapper" ref="jacksonObjectMapper"/>&ndash;&gt;
                    <property name="supportedMediaTypes" value="application/json" />
                </bean>
                <bean class="org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter">
                    &lt;!&ndash;<property name="objectMapper" ref="jacksonObjectMapper"/>&ndash;&gt;
                    <property name="supportedMediaTypes" value="application/xml" />
                </bean>
                <bean class="org.springframework.http.converter.feed.AtomFeedHttpMessageConverter">
                    &lt;!&ndash;<property name="objectMapper" ref="jacksonObjectMapper"/>&ndash;&gt;
                    <property name="supportedMediaTypes" value="application/atom+xml" />
                </bean>
                <bean class="org.springframework.http.converter.feed.RssChannelHttpMessageConverter">
                    &lt;!&ndash;<property name="objectMapper" ref="jacksonObjectMapper"/>&ndash;&gt;
                    <property name="supportedMediaTypes" value="application/rss+xml" />
                </bean>

                &lt;!&ndash;
                <bean class="org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter">
                    &lt;!&ndash;<property name="objectMapper" ref="jacksonObjectMapper"/>&ndash;&gt;
                    <property name="supportedMediaTypes" value="application/x-protobuf" />
                    &lt;!&ndash;
                    <constructor-arg>
                        <bean class="com.github.zhangkaitao.web.controller.MyExtensionRegistryInitializer"/>
                    </constructor-arg>
                    &ndash;&gt;
                </bean>
                &ndash;&gt;
            </list>
        </property>
        <property name="synchronizeOnSession" value="true" />
        <property name="customArgumentResolvers">
            <list>
                <bean class="pageableHandlerMethodArgumentResolver" />
            </list>
        </property>
    </bean>
    -->

    <!-- Controller中添加Pageable参数 -->
    <mvc:annotation-driven>
        <mvc:argument-resolvers>
            <!-- page.page page.size -->
            <bean id="pageableHandlerMethodArgumentResolver" class="org.springframework.data.web.PageableHandlerMethodArgumentResolver"
                    p:maxPageSize="20"
                    p:oneIndexedParameters="true"
                    p:pageParameterName="page"
                    p:sizeParameterName="size" />
        </mvc:argument-resolvers>
    </mvc:annotation-driven>

    <!-- 扫描只符合 @Controller的类,禁用掉默认use-default-filters="false" -->
    <context:component-scan base-package="net.cloudkit.enterprises.interfaces" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
    </context:component-scan>

    <!-- 默认的Servlet来响应静态文件,容器默认的DefaultServletHandler处理所有静态内容与无RequestMapping处理的URL-->
    <!-- <mvc:default-servlet-handler default-servlet-name="defaultServlet"/> -->
    <mvc:default-servlet-handler />

    <!-- 定义无需Controller的url<->view直接映射 -->
    <!-- redirect:/default/ forward:/default/ />-->
    <!--<mvc:view-controller path="/" view-name="forward:/default" />-->
    <!-- 默认访问跳转到登录页面(即定义无需Controller的url<->view直接映射) -->
    <!-- <mvc:view-controller path="/user/*" view-name="redirect:/login"/> -->
    <!--<mvc:view-controller path="/" view-name="redirect:/index.html"/>-->

    <!-- *********************************************************************************************************** -->
    <!--  RESOURCE FOLDERS CONFIGURATION                                                                             -->
    <!--  Dispatcher configuration for serving static resources                                                      -->
    <!-- *********************************************************************************************************** -->
    <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources/ directory -->
    <!-- 使用<mvc:resources/>元素把/resources/**映射到/resources/ ResourceHttpRequestHandler进行处理 -->
    <mvc:resources location="/resources/" mapping="/resources/**" />

    <!-- 自定义拦截链配置 -->
    <!-- 切换语言拦截器 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**" />
            <!--<ref bean="localeChangeInterceptor"/>-->
            <bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />
            <!--
            <bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
                <property name="paramName" value="locale"/>
            </bean>
            -->
        </mvc:interceptor>

        <!-- 配置Shiro拦截器，实现注册用户的注入 -->
        <!--
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="net.cloudkit.legendfire.interfaces.account.web.interceptor.UserInterceptor"/>
        </mvc:interceptor>
        -->
        <!-- 配置Token拦截器，防止用户重复提交数据 -->
        <mvc:interceptor>
            <mvc:mapping path="/**" />
            <mvc:exclude-mapping path="/user/**" />
            <mvc:exclude-mapping path="/u/**" />
            <bean id="tokenInterceptor" class="net.cloudkit.enterprises.infrastructure.commons.TokenInterceptor" />
        </mvc:interceptor>
        <!--
        <mvc:interceptor>
            <mvc:mapping path="/admin/**" />
            <bean id="executeTimeInterceptor" class="net.cloudkit.workbench.infrastructure.common.ExecuteTimeInterceptor" />
        </mvc:interceptor>
        -->
        <mvc:interceptor>
            <mvc:mapping path="/admin/**" />
            <bean id="webContentInterceptor" class="org.springframework.web.servlet.mvc.WebContentInterceptor">
                <property name="cacheSeconds" value="0" />
            </bean>
        </mvc:interceptor>
    </mvc:interceptors>

    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <!-- 是否根据request path的扩展名进行选择mediaType,扩展名至mimeType的映射,即 /test.json -->
        <property name="favorPathExtension" value="true" />
        <!-- 是否根据参数选择medieType,用于开启 /test?format=json 的支持 -->
        <property name="favorParameter" value="false" />
        <property name="parameterName" value="format" />
        <!-- 是否忽略浏览器 AcceptHeader -->
        <property name="ignoreAcceptHeader" value="false" />
        <!-- 默认的content type -->
        <property name="defaultContentType" value="text/html" />
        <!--<property name="useJaf" value="false" />-->
        <!-- 媒体类型 -->
        <!-- 根据Http请求的header中的Accept属性的值来判读：Accept: application/xml 将返回xml格式数据, Accept: application/json 将返回json格式数据 -->
        <!-- 根据参数来判断 /test?format=json 将返回json数据 /test?format=xml 将返回xml数据 -->
        <!-- 根据扩展名来判断 test.xml 将返回xml格式数据 test.json 将返回json格式数据 test.html 将返回html格式数据 -->
        <!-- 扩展名到MIME的映射；favorPathExtension, favorParameter是true时起作用  -->
        <property name="mediaTypes">
            <!--
            <value>
                atom=application/atom+xml
                html=text/html
                json=application/json
                xml=application/xml
                *=*/*
            </value>
            -->
            <map>
                <entry key="html" value="text/html" />
                <entry key="xml" value="application/xml" />
                <entry key="json" value="application/json" />
                <entry key="jsonp" value="application/javascript" />
                <entry key="atom" value="application/atom+xml" />
                <entry key="rss" value="application/rss+xml" />
            </map>
        </property>
    </bean>

    <!-- 内容协商视图解析器；根据客户端不同的请求决定不同的view进行响应 -->
    <!-- 会自动根据解析的contentType来决定使用哪个视图解析器（默认使用整个web应用中的viewResolver） -->
    <!-- View resolvers can also be configured with ResourceBundles or XML files. If you need different view resolving based on Locale, you have to use the resource bundle resolver. -->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <!-- 视图渲染优先级，此处为0，优先渲染 -->
        <property name="order" value="0" />
        <!-- 内容协商管理器,用于决定 mediaTypes -->
        <property name="contentNegotiationManager" ref="contentNegotiationManager" />
        <property name="viewResolvers">
            <list>
                <!-- Bean name view resolver -->
                <bean class="org.springframework.web.servlet.view.BeanNameViewResolver" p:order="0" />

                <!-- Freemarker View Resolver -->
                <bean id="freemarkerViewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
                    <property name="order" value="1" />
                    <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView" />
                    <property name="contentType" value="text/html; charset=UTF-8" />
                    <property name="cache" value="true" />
                    <!-- <property name="templateLoaderPath" value="/WEB-INF/views/" /> 中已经指定了视图位置 -->
                    <!--<property name="prefix" value="${template.loader_path}" />-->
                    <!-- .ftl -->
                    <property name="suffix" value="${template.suffix}" />
                    <property name="requestContextAttribute" value="request" />
                    <property name="exposeSpringMacroHelpers" value="true" />
                    <property name="exposeRequestAttributes" value="true" />
                    <property name="exposeSessionAttributes" value="true" />
                    <property name="allowSessionOverride" value="true" />
                </bean>

                <!--
                &lt;!&ndash; 注册XmlViewResolver，用于iReport & JasperReports报表生成 &ndash;&gt;
                <bean id="jasperReportResolver" class="org.springframework.web.servlet.view.XmlViewResolver">
                    <property name="order" value="2" />
                    <property name="location">
                        <bean id="reportView" class="net.cloudkit.ecological.enterprises.infrastructure.jasperreports.JasperReportsCustomMultiFormatView">
                            &lt;!&ndash; <property name="url" value="/WEB-INF/reports/report2.jasper"/> &ndash;&gt;
                            <property name="reportDataKey" value="jrMainDataSource"/>
                        </bean>
                    </property>
                </bean>
                -->

                <!-- Jasper Reports View Resolver -->
                <bean id="jasperReportsViewResolver" class="org.springframework.web.servlet.view.jasperreports.JasperReportsViewResolver">
                    <!-- 视图渲染优先级，此处为1，优先于渲染JSP -->
                    <property name="order" value="2" />
                    <!-- 自定义视图渲染类，继承于JasperReportsMultiFormatView JasperReportsCustomMultiFormatView -->
                    <property name="viewClass" value="net.cloudkit.enterprises.infrastructure.jasperreports.JasperReportsMultiItemFormatView" />
                    <!-- 报表模板路径 -->
                    <!-- <property name="prefix" value="/WEB-INF/classes/reports/"/> -->
                    <property name="prefix" value="/WEB-INF/reports/" />
                    <!-- 模板后缀 -->
                    <property name="suffix" value=".jasper" />
                    <!-- 试图渲染所有以"-report"结尾的视图名(viewName) -->
                    <property name="viewNames" value="*-report" />
                    <!-- 缓存模板(false时，每次请求都会重新加载模板，建议debug模板时设置为false) -->
                    <property name="cache" value="false" />
                    <!-- 指定数据源 -->
                    <!--<property name="jdbcDataSource" ref="dataSource" />-->
                    <!--<property name="reportDataKey" value="datasource" />-->
                    <!-- 渲染时的相关参数 -->
                    <property name="exporterParameters">
                        <map>
                            <!-- HTML时的白色背景图片(px)路径 -->
                            <entry key="net.sf.jasperreports.engine.export.JRHtmlExporterParameter.IMAGES_URI" value="resources/images/" />
                            <entry key="net.sf.jasperreports.engine.export.JRHtmlExporterParameter.CHARACTER_ENCODING" value="UTF-8" />
                        </map>
                    </property>
                </bean>

                <!-- ThymeleafViewResolver -->
                <!-- return "classpath:resources/templates/doit -->
                <bean class="org.thymeleaf.spring4.view.ThymeleafViewResolver">
                    <property name="templateEngine" ref="templateEngine" />
                    <property name="order" value="4" />
                    <property name="viewNames" value="*.html,*.xhtml" />
                </bean>

                <!-- 定义视图,定义JSP文件的位置 -->
                <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                    <property name="order" value="3" />
                    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
                    <property name="contentType" value="text/html" />
                    <property name="prefix" value="/WEB-INF/views" />
                    <property name="suffix" value=".jsp" />
                    <property name="viewNames" value="*jsp" />
                </bean>
            </list>
        </property>
        <!-- 默认视图 放在解析链最后 -->
        <property name="defaultViews">
            <list>
                <!-- for application/json application/javascript -->
                <!-- org.springframework.web.servlet.view.json.MappingJackson2JsonView -->
                <!--
                <bean class="net.cloudkit.legendfire.interfaces.shared.web.common.MyMappingJackson2JsonView">
                    <property name="prettyPrint" value="false" />
                    <property name="disableCaching" value="false" />
                </bean>
                -->
                <!--<bean class="net.cloudkit.legendfire.interfaces.shared.web.common.MyMappingJackson2JsonpView"/>-->
                <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
                    <property name="prettyPrint" value="false" />
                    <property name="disableCaching" value="true" />
                    <property name="jsonpParameterNames">
                        <set>
                            <value>jsonp</value>
                            <value>callback</value>
                        </set>
                    </property>
                </bean>
                <!-- for application/xml -->
                <!--
                <bean class="org.springframework.web.servlet.view.xml.MarshallingView" >

                    <constructor-arg>
                        <bean class= "org.springframework.oxm.jaxb.Jaxb2Marshaller">
                            &lt;!&ndash;<property name= "packagesToScan" value= "net.cloudkit.legendfire.interfaces" />&ndash;&gt;
                            <property name="classesToBeBound">
                                <list>
                                   <value>net.cloudkit.legendfire.interfaces.shared.facade.dto.FruitDTO</value>
                                </list>
                            </property>
                        </bean>
                    </constructor-arg>

                    <property name="marshaller">
                        <bean class="org.springframework.oxm.xstream.XStreamMarshaller"/>
                    </property>

                    <bean class="org.springframework.oxm.xstream.XStreamMarshaller">
                        &lt;!&ndash; 为了初始化XStreamMarshaller，这个类会把我们接口中得到结果以XML文档形式展现出来 &ndash;&gt;
                        <property name="autodetectAnnotations" value="true"/>
                    </bean>

                    <bean class="org.springframework.oxm.xstream.XStreamMarshaller">
                        <property name="autodetectAnnotations" value="true" />
                        <property name="aliases">
                            <map>
                                <entry key="employee" value="com.homeland.myapp.entity.Employee" />
                            </map>
                        </property>
                        <property name="fieldAliases">
                            <map>
                                <entry key="com.homeland.myapp.entity.Employee.firstname" value="first_name" />
                            </map>
                        </property>
                    </bean>
                </bean>
                -->
            </list>
        </property>
    </bean>

    <!-- *********************************************************************************************************** -->
    <!--  THYMELEAF-SPECIFIC ARTIFACTS                                                                               -->
    <!--  TemplateResolver <- TemplateEngine <- ViewResolver                                                         -->
    <!-- *********************************************************************************************************** -->
    <!-- org.thymeleaf.templateresolver.ServletContextTemplateResolver -->
    <!-- http://www.thymeleaf.org/doc/articles/thymeleaf3migration.html -->
    <bean id="templateResolver"
          class="org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver">
        <property name="prefix" value="/WEB-INF/templates/" />
        <property name="suffix" value=".html" />
        <property name="templateMode" value="HTML5" />
    </bean>

    <bean id="templateEngine"
          class="org.thymeleaf.spring4.SpringTemplateEngine">
        <property name="templateResolver" ref="templateResolver" />
    </bean>

    <bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape" />

    <!-- 设置freeMarker的配置文件路径 -->
    <!--
    <bean id="freemarkerConfiguration" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        &lt;!&ndash; 注释掉的下方代码是指引freemarker的基本信息的配置位置，因为已将配置信息移到了applicationContext文件中 &ndash;&gt;
        &lt;!&ndash;<property name="location" value="classpath:/WEB-INF/config/freemarker.properties" />&ndash;&gt;
    </bean>
    -->



    <!--# 配置freeMarker的模板路径-->
    <bean id="freeMarkerConfigurer" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <!--# /WEB-INF/ftl/-->
        <property name="templateLoaderPaths" value="${template.loader_path}" />
        <!-- 多路径配置 -->
        <!--
        <property name="templateLoaderPaths">
            <list>
                <value>/WEB-INF/templates</value>
                <value>classpath:templates</value>
            </list>
        </property>
        -->
        <property name="freemarkerSettings">
            <props>
                <prop key="defaultEncoding">${template.default_encoding}</prop>
                <prop key="url_escaping_charset">${template.url_escaping_charset}</prop>
                <prop key="locale">${template.locale}</prop>
                <prop key="template_update_delay">${template.template_update_delay}</prop>
                <prop key="tag_syntax">${template.tag_syntax}</prop>
                <prop key="whitespace_stripping">${template.whitespace_stripping}</prop>
                <prop key="classic_compatible">${template.classic_compatible}</prop>
                <prop key="number_format">${template.number_format}</prop>
                <prop key="boolean_format">${template.boolean_format}</prop>
                <prop key="datetime_format">${template.datetime_format}</prop>
                <prop key="date_format">${template.date_format}</prop>
                <prop key="time_format">${template.time_format}</prop>
                <!-- 配置自定义的freemarker异常处理 -->
                <prop key="template_exception_handler">${template.template_exception_handler}</prop>
                <!-- deprecated freemarker.ext.beans.BeansWrapper BeansWrapper(2.3.21) -->
                <!-- http://freemarker.org/docs/pgui_datamodel_objectWrapper.html -->
                <prop key="object_wrapper">DefaultObjectWrapper(2.3.21)</prop>
            </props>
        </property>
        <property name="freemarkerVariables">
            <map>
                <entry key="xml_escape" value-ref="fmXmlEscape" />
                <entry key="system_name" value="${system.name}" />
                <entry key="system_version" value="${system.version}" />
                <entry key="system_description" value="${system.description}" />
                <entry key="context_path" value="#{servletContext.contextPath}" />
                <entry key="locale" value="${template.locale}" />
                <!--# <entry key="setting" value="#{T(SettingUtils).get()}" />-->
                <!--
                <entry key="flash_message" value-ref="flashMessageDirective" />
                -->
                <!--# directive-->
                <entry key="uuid" value-ref="uuidDirective" />
                <entry key="upper" value-ref="upperDirective" />
                <!--# method-->
                <entry key="message" value-ref="messageMethod" />
                <entry key="currency" value-ref="currencyMethod" />
                <entry key="abbreviate" value-ref="abbreviateMethod" />
                <entry key="execute_time" value-ref="executeTimeDirective" />
            </map>
        </property>
    </bean>

    <!-- 第二种Freemarker模板路径设置方法 -->
    <bean id="freeMarkerConfiguration" class="org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean">
        <property name="templateLoaderPath" value="file:D:/templates" />
    </bean>

    <!--
    //WEB
    Template t = freeMarkerConfigurer.getConfiguration().getTemplate(templateName);
    return FreeMarkerTemplateUtils.processTemplateIntoString(t, model);

    //NONE WEB
    Template t = freeMarkerConfiguration.getTemplate(templateName);
    return FreeMarkerTemplateUtils.processTemplateIntoString(t, model);
    -->
    <bean id="templateService" class="net.cloudkit.enterprises.infrastructure.freemarker.FreeMarkerTemplate">
        <property name="freeMarkerConfigurer" ref="freeMarkerConfigurer" />
        <property name="freeMarkerConfiguration" ref="freeMarkerConfiguration" />
    </bean>

    <!--
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        &lt;!&ndash;
        <property name="converters">
            <array>
                <bean class="org.springframework.http.converter.StringHttpMessageConverter" />
                <bean class="org.springframework.http.converter.ResourceHttpMessageConverter" />
                &lt;!&ndash;<bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" />&ndash;&gt;
            </array>
        </property>
        &ndash;&gt;
    </bean>

    <mvc:annotation-driven validator="validator" conversion-service="conversionService" content-negotiation-manager="contentNegotiationManager" />
    -->

    <!--
    &lt;!&ndash;重定向视图控制器标签&ndash;&gt;
    <mvc:redirect-view-controller path="/redirect" redirect-url="/status" context-relative="true" status-code="301" keep-query-params="true" />
    &lt;!&ndash;状态控制器标签&ndash;&gt;
    <mvc:status-controller path="/status" status-code="200" />
    &lt;!&ndash;带状态的视图控制器标签&ndash;&gt;
    <mvc:view-controller path="/error/**" status-code="200" />
    -->

    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!--
    <mvc:freemarker-configurer>
        <mvc:template-loader-path location="/WEB-INF/templates/"  />
    </mvc:freemarker-configurer>
    <mvc:velocity-configurer resource-loader-path="/WEB-INF/vm/,classpath:" />
    <mvc:groovy-configurer resource-loader-path="classpath:templates/" cache-templates="false" />
    <mvc:view-resolvers>
        <mvc:content-negotiation>
            <mvc:default-views>
                <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
                    <property name="jsonpParameterNames">
                        <set>
                            <value>jsonp</value>
                            <value>callback</value>
                        </set>
                    </property>
                </bean>
            </mvc:default-views>
        </mvc:content-negotiation>
        <mvc:freemarker cache-views="false" prefix="" suffix=".ftl" />
        <mvc:velocity cache-views="false" prefix="" suffix=".vm" />
        <mvc:groovy cache-views="false" suffix=".tpl" />
    </mvc:view-resolvers>
    -->
    <mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
        <mvc:message-converters register-defaults="true">
            <!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8" />
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/plain;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
            <!-- 将Jackson2HttpMessageConverter的默认格式化输出设为true -->
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="objectMapper" ref="jacksonObjectMapper" />
                <!-- <property name="supportedMediaTypes" value="application/json"/> -->
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/plain;charset=UTF-8</value>
                        <value>test/html;charset=UTF-8</value>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
                <property name="prettyPrint" value="true"/>
            </bean>

            <!--
            <bean id="fastJsonHttpMessageConverter" class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                        &lt;!&ndash; 避免IE出现下载JSON文件的情况 &ndash;&gt;
                        <value>text/html;charset=UTF-8</value>
                    </list>
                </property>
                <property name="features">
                    <list>
                        &lt;!&ndash; <value>WriteMapNullValue</value> &ndash;&gt;
                        <value>QuoteFieldNames</value>
                        <value>WriteDateUseDateFormat</value>
                    </list>
                </property>
            </bean>

            &lt;!&ndash;使用XML格式输出数据&ndash;&gt;
            <bean id="marshallingHttpMessageConverter" class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
                <property name="marshaller" ref="castorMarshaller" />
                <property name="unmarshaller" ref="castorMarshaller" />
                &lt;!&ndash;
                <constructor-arg>
                   <bean class="org.springframework.oxm.xstream.XStreamMarshaller">
                       <property name="streamDriver">
                           <bean class="com.thoughtworks.xstream.io.xml.StaxDriver"/>
                       </property>
                       <property name="annotatedClasses">
                           <list>
                               <value>com.thinkgem.jeesite.common.persistence.BaseEntity</value>
                           </list>
                       </property>
                   </bean>
               </constructor-arg>
               &ndash;&gt;
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/xml;charset=UTF-8</value>
                        <value>application/xml;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
            -->
        </mvc:message-converters>
    </mvc:annotation-driven>

    <bean id="jacksonObjectMapper" class="net.cloudkit.enterprises.infrastructure.commons.CustomJacksonObjectMapper"/>
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <!--<bean id="castorMarshaller" class="org.springframework.oxm.castor.CastorMarshaller" />-->

    <!-- 国际化的消息资源文件 -->
    <!-- <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource" p:basename="i18n/messages"/> -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="defaultEncoding" value="UTF-8" />
        <property name="cacheSeconds" value="${message.cache_seconds}" />
        <property name="useCodeAsDefaultMessage" value="false" />
        <!-- locale -->
        <!--<property name="basename" value="${message.common_path}" />-->
        <property name="basenames">
            <list>
                <!-- 在web环境中一定要定位到classpath 否则默认到当前web应用下找 locale language i18n -->
                <!-- <value>classpath:i18n/message</value> <value>classpath:messages</value> <![CDATA[]]> -->
                <value>${message.common_path}</value>
                <!--<value>classpath:messages</value>-->
                <value>org/hibernate/validator/ValidationMessages</value>
            </list>
        </property>
    </bean>



    <!-- 将Controller抛出的异常转到特定View, 保持SiteMesh的装饰效果 -->
    <!-- Mapping exception to the handler view HandlerExceptionResolver -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <!--
        &lt;!&ndash; 配置多个statusCode &ndash;&gt;
        <property name="statusCodes">
            <props>
                <prop key="/error">500</prop>
                <prop key="/resource_not_found">404</prop>
            </props>
        </property>
        &lt;!&ndash; 设置日志输出级别，不定义则默认不输出警告等错误日志信息 &ndash;&gt;
        &lt;!&ndash; <property name="warnLogCategory" value="WARN"></property> &ndash;&gt;
        <property name="warnLogCategory" value="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver" />
        -->
        <property name="defaultErrorView" value="/error" />
        <property name="defaultStatusCode" value="500" />
        <!-- 定义异常处理页面用来获取异常信息的变量名，如果不添加exceptionAttribute属性，则默认为exception -->
        <property name="exceptionAttribute" value="exception"/>
        <property name="exceptionMappings">
            <props>
                <prop key="org.apache.shiro.authz.UnauthorizedException">/unauthorized</prop>
                <!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到/WEB-INF/jsp/error_fileupload.jsp页面 -->
                <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">/error</prop>
                <!--
                &lt;!&ndash; 参数绑定错误(如：必须参数没传递) &ndash;&gt;
                <prop key="org.springframework.web.bind.ServletRequestBindingException">/error</prop>
                &lt;!&ndash; 参数错误 &ndash;&gt;
                <prop key="java.lang.IllegalArgumentException">/error</prop>
                &lt;!&ndash; 参数类型有误 &ndash;&gt;
                <prop key="org.springframework.validation.BindException">/error</prop>
                &lt;!&ndash; 数据库错误 &ndash;&gt;
                <prop key="java.sql.SQLException">/error</prop>
                &lt;!&ndash; 其他错误为'未定义错误'(unknowError) &ndash;&gt;
                <prop key="java.lang.Exception">/error</prop>
                -->
                <!-- 处理其它异常(包括Controller抛出的) -->
                <prop key="java.lang.Throwable">/error</prop>
            </props>
        </property>
    </bean>

    <!-- zh_CN AcceptHeaderLocaleResolver -->
    <!-- 固定的locale,不能动态改变 -->
    <!--<bean id="localeResolver" class="org.springframework.web.servlet.i18n.FixedLocaleResolver" p:defaultLocale="${locale}" />-->

    <!-- 设置最大有效时间，如果是-1，则不存储，浏览器关闭后即失效，默认为Integer.MAX_INT-->
    <!-- 设置cookie可见的地址，默认是“/”即对网站所有地址都是可见的，如果设为其它地址，则只有该地址或其后的地址才可见-->
    <!--
    &lt;!&ndash; 基于Cookie的国际化实现 &ndash;&gt;
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver"
          p:cookieName="locale"
          p:cookieMaxAge="100000"
          p:cookiePath="/"
          p:defaultLocale="${locale}"/>
    -->
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver" p:defaultLocale="${locale}" />

    <!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->
    <!-- Configure the multipart resolver -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 默认编码 (ISO-8859-1) -->
        <property name="defaultEncoding" value="UTF-8" />
        <!-- 最大内存大小 (10240) -->
        <property name="maxInMemorySize" value="10240" />
        <!-- 上传临时目录名 (WebUtils#TEMP_DIR_CONTEXT_ATTRIBUTE) /attachments -->
        <property name="uploadTempDir" value="/attachments" />
        <!-- 最大文件大小，-1为无限止(-1) -->
        <!-- 指定所上传文件的总大小不能超过200KB。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->
        <!-- one of the properties available; the maximum file size in bytes -->
        <property name="maxUploadSize" value="200000" />
    </bean>

    <!--<mvc:annotation-driven />-->
    <mvc:annotation-driven validator="validator" />

    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
        <property name="validationMessageSource" ref="messageSource" />
    </bean>

    <!-- jcaptcha -->
    <!--
    <bean id="imageCaptchaService" class="com.octo.captcha.service.image.DefaultManageableImageCaptchaService">
        <property name="captchaEngine">
            <bean class="net.cloudkit.legendfire.infrastructure.common.ImageCaptchaEngine" />
        </property>
        <property name="minGuarantedStorageDelayInSeconds" value="3600" />
    </bean>
    -->

    <!--
	<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
		<property name="config">
			<bean class="com.google.code.kaptcha.utils.Config">
				<constructor-arg>
					<props>
						###
                        kaptcha.border  是否有边框  默认为true  我们可以自己设置yes，no
                        kaptcha.border.color   边框颜色   默认为Color.BLACK
                        kaptcha.border.thickness  边框粗细度  默认为1
                        kaptcha.producer.impl   验证码生成器  默认为DefaultKaptcha
                        kaptcha.textproducer.impl   验证码文本生成器  默认为DefaultTextCreator
                        kaptcha.textproducer.char.string   验证码文本字符内容范围  默认为abcde2345678gfynmnpwx
                        kaptcha.textproducer.char.length   验证码文本字符长度  默认为5
                        kaptcha.textproducer.font.names    验证码文本字体样式  默认为new Font("Arial", 1, fontSize), new Font("Courier", 1, fontSize)
                        kaptcha.textproducer.font.size   验证码文本字符大小  默认为40
                        kaptcha.textproducer.font.color  验证码文本字符颜色  默认为Color.BLACK
                        kaptcha.textproducer.char.space  验证码文本字符间距  默认为2
                        kaptcha.noise.impl    验证码噪点生成对象  默认为DefaultNoise
                        kaptcha.noise.color   验证码噪点颜色   默认为Color.BLACK
                        kaptcha.obscurificator.impl   验证码样式引擎  默认为WaterRipple
                        kaptcha.word.impl   验证码文本字符渲染   默认为DefaultWordRenderer
                        kaptcha.background.impl   验证码背景生成器   默认为DefaultBackground
                        kaptcha.background.clear.from   验证码背景颜色渐进   默认为Color.LIGHT_GRAY
                        kaptcha.background.clear.to   验证码背景颜色渐进   默认为Color.WHITE
                        kaptcha.image.width   验证码图片宽度  默认为200
                        kaptcha.image.height  验证码图片高度  默认为50
						###

						#  Border around kaptcha. Legal values are yes or no.
						<prop key="kaptcha.border">no</prop>
						# Color of the border. Legal values are r,g,b (and optional alpha) or white,black,blue. 105,179,90
						<prop key="kaptcha.border.color">red</prop>
						# Thickness of the border around kaptcha. Legal values are > 0.
						<prop key="kaptcha.border.thickness">5</prop>
						# Width in pixels of the kaptcha image.
						<prop key="kaptcha.image.width">101</prop>
						# Height in pixels of the kaptcha image.
						<prop key="kaptcha.image.height">33</prop>
						# The image producer.
						<prop key="kaptcha.producer.impl">com.google.code.kaptcha.impl.DefaultKaptcha</prop>
						# The text producer.
						<prop key="kaptcha.textproducer.impl">com.google.code.kaptcha.text.impl.DefaultTextCreator</prop>
						# The characters that will create the kaptcha.
						<prop key="kaptcha.textproducer.char.string">0123456789abcdefghijklmnopqrstuvwxyz</prop>
						# The number of characters to display.
						<prop key="kaptcha.textproducer.char.length">5</prop>
						# A list of comma separated font names.宋体,楷体,微软雅黑
						<prop key="kaptcha.textproducer.font.names">Arial, Courier</prop>
						# The size of the font to use.
						<prop key="kaptcha.textproducer.font.size">23</prop>
						# The color to use for the font. Legal values are r,g,b.
						<prop key="kaptcha.textproducer.font.color">black</prop>
						# The noise producer. com.google.code.kaptcha.impl.NoNoise
						<prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.DefaultNoise</prop>
						# The noise color. Legal values are r,g,b.
						<prop key="kaptcha.noise.color">red</prop>
						# The obscurificator implementation.
						<prop key="kaptcha.obscurificator.impl">com.google.code.kaptcha.impl.ShadowGimpy</prop>
						# The background implementation.
						<prop key="kaptcha.background.impl">com.google.code.kaptcha.impl.DefaultBackground</prop>
						# Ending background color. Legal values are r,g,b.
						<prop key="kaptcha.background.clear.to">white</prop>
						# The word renderer implementation.
						<prop key="kaptcha.word.impl">com.google.code.kaptcha.text.impl.DefaultWordRenderer</prop>
						# The value for the kaptcha is generated and is put into the HttpSession. This is the key value for that item in the session.
						<prop key="kaptcha.session.key">KAPTCHA_SESSION_KEY</prop>
						# The date the kaptcha is generated is put into the HttpSession. This is the key value for that item in the session.
						<prop key="kaptcha.session.date">KAPTCHA_SESSION_DATE</prop>
					</props>
				</constructor-arg>
			</bean>
		</property>
	</bean>
    -->

    <!--
    &lt;!&ndash; 返回类型定义 &ndash;&gt;
    <util:list id="messageConverters">
        <ref bean="stringHttpMessageConverter" />
        <ref bean="fastJsonHttpMessageConverter" />
        <ref bean="marshallingHttpMessageConverter" />
    </util:list>

    &lt;!&ndash; 访问Rest服务的客户端 RestTemplate &ndash;&gt;
    <bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
        <property name="messageConverters" ref="messageConverters">
        </property>
    </bean>
    -->
</beans>
