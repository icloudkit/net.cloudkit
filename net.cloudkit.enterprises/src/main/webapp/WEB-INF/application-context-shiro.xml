<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
	http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.1.xsd">

	<description>Shiro安全配置</description>
    <!-- 支持Shiro对Controller的方法级AOP安全控制 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true" />
    </bean>

    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="org.apache.shiro.authz.UnauthorizedException">/unauthorized</prop>
            </props>
        </property>
    </bean>

    <!-- Shiro's main business-tier object for web-enabled applications  depends-on="userDao,groupDao" -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="sessionManager" ref="sessionManager" />
		<!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
		<property name="realm" ref="shiroDbRealm" />
		<property name="cacheManager" ref="shiroEhCacheManager" />
		<!--
		<property name="rememberMeManager.cookie.name" value="rememberMe"/>
    	<property name="rememberMeManager.cookie.maxAge" value="3*60"/>
    	-->
    </bean>

	<!-- 自定义的Realm -->
	<!-- Define the realm you want to use to connect to your back-end security datasource: -->
	<bean id="shiroDbRealm" class="net.cloudkit.enterprises.infrastructure.shiro.ShiroDbRealm">
		<!-- 用来实现用户名密码等相关验证数据的查询 -->
		<!-- <property name="accountManager" ref="accountManager" /> -->
		<!-- <property name="adminService" ref="adminServiceImpl" /> -->
		<!-- MD5加密 -->
		<!--
		<property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
			    <property name="hashAlgorithmName" value="MD5" />
			</bean>
		</property>
		-->
	</bean>

    <!--
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        &lt;!&ndash; 设定角色的登录链接，这里为cas登录页面的链接可配置回调地址  &ndash;&gt;
        <property name="loginUrl" value="https://www.cas.com/login?service=http://www.example.com/shiro-cas"/>

        <property name="filters">
            <map>
                &lt;!&ndash; 添加casFilter到shiroFilter &ndash;&gt;
                <entry key="casFilter" value-ref="casFilter"/>
            </map>
        </property>
        <property name="filterChainDefinitions">
            <value>
                /shiro-cas = casFilter
                /admin/** = roles[ROLE_USER]
                /** = anon
            </value>
        </property>
    </bean>

    <bean id="casFilter" class="org.apache.shiro.cas.CasFilter">
        &lt;!&ndash; 配置验证错误时的失败页面  &ndash;&gt;
        <property name="failureUrl" value="/error.jsp"/>
    </bean>

    <bean id="casRealm" class="org.apache.shiro.cas.CasRealm">
        <property name="defaultRoles" value="ROLE_USER"/>
        <property name="casServerUrlPrefix" value="https://www.cas.com"/>
        &lt;!&ndash; 客户端的回调地址设置，必须和下面的shiro-cas过滤器拦截的地址一致 &ndash;&gt;
        <property name="casService" value="http://www.example.com/shiro-cas"/>
    </bean>
    &lt;!&ndash; 如果要实现cas的remember me的功能，需要用到下面这个bean，并设置到securityManager的subjectFactory中 &ndash;&gt;
    <bean id="casSubjectFactory" class="org.apache.shiro.cas.CasSubjectFactory"/>

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="casRealm"/>
        <property name="subjectFactory" ref="casSubjectFactory"/>
    </bean>
    -->

    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<property name="globalSessionTimeout" value="6000000"/>
		<property name="sessionDAO" ref="shiroRedisSessionDAO"/>
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
		<property name="sessionValidationSchedulerEnabled" value="true"/>
		<property name="sessionIdCookie" ref="simpleCookie"/>
	</bean>
	<!--自定义session存储容器-->
	<bean id="shiroRedisSessionDAO" class="net.cloudkit.enterprises.infrastructure.shiro.ShiroRedisSessionDAO" />
	<!--
	定时清理僵尸session，Shiro会启用一个后台守护线程定时执行清理操作
	用户直接关闭浏览器造成的孤立会话
	-->
	<bean id="sessionValidationScheduler"
		  class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
		<property name="interval" value="6000000"/>
		<property name="sessionManager" ref="sessionManager"/>
	</bean>
	<!--
	指定本系统SESSIONID, 默认为: JSESSIONID
	问题: 与SERVLET容器名冲突, 如JETTY, TOMCAT 等默认JSESSIONID,
	当跳出SHIRO SERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失!
	-->
	<bean id="simpleCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg name="name" value="WEB_SESSIONID"/>
	</bean>


	<!-- 用于单点登录的Realm -->
	<!--
	<bean id="shiroCasRealm" class="net.cloudkit.legendfire.interfaces.common.common.ShiroCasRealm" depends-on="userDao">
		<property name="accountService" ref="accountService"/>
		<property name="cacheManager" ref="shiroCacheManager"/>
	</bean>
	-->

	<!-- For simplest integration, so that all SecurityUtils.* methods work in all cases, -->
	<!-- make the securityManager bean a static singleton.  DO NOT do this in web         -->
	<!-- applications - see the 'Web Applications' section below instead.                 -->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
	    <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
	    <property name="arguments" ref="securityManager"/>
	</bean>

	<!-- Shiro Filter -->
	<!--
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        # shiro 的核心安全接口
	    <property name="securityManager" ref="securityManager" />
	    # 要求登录时的链接
	    <property name="loginUrl" value="/login.jsp" />
	    # 登陆成功后要跳转的连接
	    <property name="successUrl" value="/index.jsp" />
	    # 未授权时要跳转的连接
	    <property name="unauthorizedUrl" value="/unauthorized.jsp" />
        # shiro 连接约束配置
        <property name="filterChainDefinitions">
            <value>
            	# some example chain definitions:
	            /admin/** = authc, roles[admin]
	            /docs/** = authc, perms[document:read]
	            /** = authc
	            # more URL-to-FilterChain definitions here

                /rollindex = anon
                /index.html = anon
                /login = authc
                /logout = logout
                /resources/** = anon
                /admin/** = user
                /account/** = user
            </value>
        </property>
    </bean>
    -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- shiro的核心安全接口 -->
	    <property name="securityManager" ref="securityManager" />
	    <!-- 要求登录时的链接 -->
	    <!-- override these for application-specific URLs if you like: -->
	    <!--<property name="loginUrl" value="/login" />-->
	    <property name="loginUrl" value="/signin" />
	    <!-- 登陆成功后要跳转的连接 -->
	    <property name="successUrl" value="/workbench" />
	    <!-- 未授权时要跳转的连接 -->
	    <property name="unauthorizedUrl" value="/unauthorized" />
	    <!-- shiro 连接约束配置 -->
	    <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
	    <!-- defined will be automatically acquired and available via its beanName in chain        -->
	    <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
	    <property name="filters">
	        <map>
	        	<entry key="authc" value-ref="formAuthenticationFilter"></entry>
                <entry key="perms" value-ref="permissionsAuthorizationExpandFilter"></entry>
				<!-- <entry key="cas" value-ref="casFilter"></entry> -->
	            <!-- <entry key="anAlias" value-ref="someFilter"/> -->
	        </map>
	    </property>

	    <!-- shiro连接约束配置,在这里使用自定义的动态获取资源类 -->
	    <property name="filterChainDefinitionMap" ref="chainDefinitionSectionMetaSource" />
	</bean>

	<!-- 基于表单认证过滤器 formAuthenticationFilter -->
	<bean id="formAuthenticationFilter" class="net.cloudkit.enterprises.infrastructure.shiro.FormAuthenticationExpandFilter"/>
    <bean id="permissionsAuthorizationExpandFilter" class="net.cloudkit.enterprises.infrastructure.shiro.PermissionsAuthorizationExpandFilter"/>

	<!--
		anon 表示匿名访问（不需要认证与授权）
		authc 表示需要认证
		/** = user
		perms[user:view] 表示用户需要提供值为“user:view”Permission 信息
		authc 和  perms[*] 表示为受保护资源
	-->
	<bean id="chainDefinitionSectionMetaSource"  class="net.cloudkit.enterprises.infrastructure.shiro.ChainDefinitionSectionMetaSource">
        <!--
        anon org.apache.shiro.web.filter.authc.AnonymousFilter
        authc org.apache.shiro.web.filter.authc.FormAuthenticationFilter
        authcBasic org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter
        logout org.apache.shiro.web.filter.authc.LogoutFilter
        noSessionCreation org.apache.shiro.web.filter.session.NoSessionCreationFilter
        perms org.apache.shiro.web.filter.authz.PermissionAuthorizationFilter
        port org.apache.shiro.web.filter.authz.PortFilter
        rest org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter
        roles org.apache.shiro.web.filter.authz.RolesAuthorizationFilter
        ssl org.apache.shiro.web.filter.authz.SslFilter
        user org.apache.shiro.web.filter.authz.UserFilter
        -->
        <!--
        anon,authc,authcBasic,user是第一组认证过滤器
        perms,port,rest,roles,ssl是第二组授权过滤器
        注意user和authc不同：当应用开启了rememberMe时,用户下次访问时可以是一个user,但绝不会是authc,因为authc是需要重新认证的
        user表示用户不一定已通过认证,只要曾被Shiro记住过登录状态的用户就可以正常发起请求,比如rememberMe
        以前的一个用户登录时开启了rememberMe,然后他关闭浏览器,下次再访问时他就是一个user,而不会authc

        /admin=authc,roles[admin] 表示用户必需已通过认证,并拥有admin角色才可以正常发起'/admin'请求
        /edit=authc,perms[admin:edit] 表示用户必需已通过认证,并拥有admin:edit权限才可以正常发起'/edit'请求
        /home=user 表示用户不一定需要已经通过认证,只需要曾经被Shiro记住过登录状态就可以正常发起'/home'请求

        /admins/**=anon 无参,表示可匿名使用,可以理解为匿名用户或游客
        /admins/user/**=authc 无参,表示需认证才能使用
        /admins/user/**=authcBasic 表示httpBasic认证
        /admins/user/**=user 无参,表示必须存在用户,当登入操作时不做检查
        /admins/user/**=ssl 无参,表示安全的URL请求,协议为https
        /admins/user/**=perms[user:add:*] 参数可写多个,多参时必须加上引号,且参数之间用逗号分割,如/admins/user/**=perms["user:add:*,user:modify:*"] 当有多个参数时必须每个参数都通过才算通过,相当于isPermitedAll()方法
		/admins/user/**=port[8081] 当请求的URL端口不是8081时,跳转到schemal://serverName:8081?queryString 其中schmal是协议http或https等,serverName是你访问的Host,8081是Port端口,queryString是你访问的URL里的?后面的参数
        /admins/user/**=rest[user] 根据请求的方法,相当于/admins/user/**=perms[user:method],其中method为post,get,delete等
        /admins/user/**=roles[admin] 参数可写多个,多个时必须加上引号,且参数之间用逗号分割,如/admins/user/**=roles["admin,guest"] 当有多个参数时必须每个参数都通过才算通过,相当于hasAllRoles()方法

        #/setting/** authc
        #/unauthorized/ = anon
        #/assets/** = anon
        # 权限配置示例
        #/security/account/view=authc,perms[SECURITY_ACCOUNT_VIEW]
        #/docs/** = authc, perms[document:read]
        #/user/user_list = perms["user:view"]
        #/user/user_** = perms["user:edit"]
        #/admin/** = roles[admin]
        -->
        <property name="filterChainDefinitions" >
			<value>
                #/login = authc
				/signin = authc
                /logout = logout
                #/workbench = authc

                /resources/** = anon

                /u/** authc
                /user/** authc

                /admin/** = authc, roles[admin]
                /** = anon
			</value>
		</property>
	</bean>

	<!-- shiro对ehcache的缓存管理直接使用spring的缓存工厂 -->
	<bean id="shiroEhCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
	    <property name="cacheManager" ref="ehCacheManagerFactory" />
	</bean>

	<!-- 用户授权信息Cache, 采用EhCache -->
	<!-- <bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" /> -->
	<!--
	<bean id="shiroEhCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		# <property name="cacheManagerConfigFile" value="classpath:ehcache-default.xml"/>
		<property name="cacheManager" ref="ehCacheManager" />
	</bean>
	-->

	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

	<!-- AOP式方法级权限检查  -->
 	<!-- Enable Shiro Annotations for Spring-configured beans.  Only run after -->
	<!-- the lifecycleBeanProcessor has run: -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	<!-- 启用Shiro注解 例如，@RequiresRoles，@RequiresPermissions 等等 -->
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
	    <property name="securityManager" ref="securityManager"/>
	</bean>

</beans>
