#
# Copyright (C) 2016. The CloudKit Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Configuration Files
# logging.properties
# Level的五个等级SEVERE(最高值) ,WARNING ,INFO ,CONFIG ,FINE ,FINER ,FINEST(最低值).不同于log4j
# JDK Logger 优先级从低到高所有的Logger Level为：FINEST, FINER, FINE, CONFIG, INFO, WARNING, ERROR. 你可以为每一个Handler设置你的级别
# Set the logging level for the root of the namespace.
.level=ALL

# 为 Handler 指定默认的级别(默认为 Level.INFO).
java.util.logging.ConsoleHandler.level=INFO
# 指定要使用的 Formatter 类的名称(默认为 java.util.logging.SimpleFormatter).
java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter

#Properties for the FileHandler
# 为 Handler 指定默认的级别(默认为 Level.ALL).
java.util.logging.FileHandler.level=INFO
# 指定要使用的 Formatter 类的名称(默认为 java.util.logging.XMLFormatter).
java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter
# 指定要写入到任意文件的近似最大量(以字节为单位).如果该数为 0，则没有限制(默认为无限制).
java.util.logging.FileHandler.limit=50000
# 指定有多少输出文件参与循环(默认为 1).
java.util.logging.FileHandler.count=1
# /  目录分隔符
# %h 系统当前用户目录. The value of the user.home system property.
# %t 系统临时目录. The system temporary directory.
# %u 一个唯一的数字以处理冲突问题. A unique number to resolve conflicts.
# %g 生成的以区别循环日志文件名. The generation number for rotated logs. (A .%g suffix is used if rotation is specified and the pattern doesn't contain %g.)
# %% 一个%. The % character.
# 为生成的输出文件名称指定一个模式.有关细节请参见以下内容(默认为 "%h/java%u.log").
java.util.logging.FileHandler.pattern=D:/temp/text_log%u.log
# 指定是否应该将 FileHandler 追加到任何现有文件上(默认为 false).
java.util.logging.FileHandler.append=true

# 所有要使用的Handler，类似于Log4j的Appender.他用来标明日志消息输出到何处.目前支持控制台，文件，Socket.如果你希望加上对Email，数据库的支持，只需要扩展java.util.logging.Handler，并把他加入到handlers列表就行了
handlers= java.util.logging.ConsoleHandler,java.util.logging.FileHandler
