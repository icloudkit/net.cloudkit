#
# Copyright (C) 2016. The CloudKit Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

### set log levels debug , DATABASE
log4j.rootLogger = info, CONSOLE, R, E

### 输出到控制台 stdout
# Log4j的输出终端（Appender接口）
# org.apache.log4j.ConsoleAppender(控制台)
# org.apache.log4j.FileAppender(文件)
# org.apache.log4j.DailyRollingFileAppender(每天都产生一个日志文件)
# org.apache.log4j.RollingFileAppender(文件大小达到指定尺寸时产生一个新的日志文件，文件名称上会自动添加数字序号。)
# org.apache.log4j.WriterAppender(将日志信息以流的格式发送到任意指定的地方)
log4j.appender.CONSOLE = org.apache.log4j.ConsoleAppender
log4j.appender.CONSOLE.Target = System.out
# Log4j的日志级别（Level）
# ALL<DEBUG<INFO<WARN<ERROR<FATAL<OFF
log4j.appender.CONSOLE.Threshold = info
# Log4j的输出布局模式（Layout接口）
# org.apache.log4j.xml.XMLLayout
# org.apache.log4j.HTMLLayout（以HTML表格形式布局）
# org.apache.log4j.PatternLayout（可以灵活地指定布局模式）
# org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）
# org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等信息）
log4j.appender.CONSOLE.layout = org.apache.log4j.PatternLayout
### %d %-5p [%t] %-17c{2} (%13F:%L) %3x - %m%n ###
### %d{ABSOLUTE} %5p %c{1}:%L - %m%n
# 格式化日志信息
# %m：输出代码中指定的消息。
# %p：输出优先级。
# %r：输入自应用启动到输出该log信息耗费的毫秒数。
# %c：输出所属的类目，通常就是所在类的全名。
# %t：输出产生该日志线程的线程名。
# %n：输出一个回车换行符。Windows平台为"\r\n"，UNIX为"\n"。
# %d：输出日志时间点的日期或时间，默认格式为ISO8601，推荐使用"%d{ABSOLUTE}"，这个输出格式形如："2007-05-07 18:23:23,500"，符合中国人习惯。
# %l：输出日志事件发生的位置，包括类名、线程名，以及所在代码的行数。
# %x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
# %%: 输出一个”%”字符
# %F: 输出日志消息产生时所在的文件名称
# %L: 输出代码中的行号
# %20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。
# %-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，”-”号指定左对齐。
# %.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。
# %20.30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边交远销出的字符截掉。
log4j.appender.CONSOLE.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} [%t:%r] - [ %p ] %m%n

### 输出到日志文件
log4j.appender.R = org.apache.log4j.RollingFileAppender
log4j.appender.R.File = /Users/temp/logs/example.log
log4j.appender.R.MaxFileSize = 5000KB
log4j.appender.R.MaxBackupIndex = 40
log4j.appender.R.Append = true
log4j.appender.R.layout = org.apache.log4j.PatternLayout
log4j.appender.R.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} [%x][%t:%r] - [%p] %m%n
#log4j.appender.D.layout.LocationInfo = true

### 每日产生一文件配置
#log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
#log4j.appender.D.File = d:/nsam_bg_backup.log
#log4j.appender.D.DatePattern = '.'yyyy-MM-dd
#log4j.appender.D.Append = true
#log4j.appender.D.Threshold = DEBUG
#log4j.appender.D.layout = org.apache.log4j.PatternLayout
#log4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} [%c]-[%p] %m%n

### 每日保存异常信息到单独文件
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
## 异常日志文件名
log4j.appender.E.File = /Users/temp/logs/example_error.log
log4j.appender.E.DatePattern = '.'yyyy-MM-dd
log4j.appender.E.Append = true
## 只输出ERROR级别以上的日志
log4j.appender.E.Threshold = ERROR
log4j.appender.E.layout = org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} [%x][%t:%r] - [ %p ] %m%n

# 用于数据库
#log4j.appender.DATABASE=org.apache.log4j.jdbc.JDBCAppender
# jdbc:oracle:thin:@localhost:1521:ORCL jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8
# jdbc:oracle:thin:@localhost:1521:ORCL jdbc:oracle:thin:@10.33.1.239:1521:nsam
#log4j.appender.DATABASE.URL=jdbc:oracle:thin:@10.33.1.239:1521:nsam
# oracle.jdbc.OracleDriver com.mysql.jdbc.Driver
#log4j.appender.DATABASE.driver=oracle.jdbc.OracleDriver
#log4j.appender.DATABASE.user=gmt
#log4j.appender.DATABASE.password=gmt
#log4j.appender.DATABASE.Threshold = INFO
#log4j.appender.DATABASE.sql=INSERT INTO SYS_LOG (ID, TIMESTAMP, LOCALHOST, "LEVEL", LOCATION, MESSAGE) VALUES (SEQ_SYS_LOG.NEXTVAL, TO_DATE(SUBSTR('%d{yyyy-MM-dd HH:mm:ss}', 1, 17), 'yyyy-MM-dd HH24:mi:ss'), '%x','%p','%c{1}','%m')
#log4j.appender.DATABASE.layout=org.apache.log4j.PatternLayout
#log4j.appender.DATABASE.layout.ConversionPattern = [framework] %d{yyyy-MM-dd HH:mm:ss} - %c -%- 4r [ %t] %- 5p %c %x - %m %n
