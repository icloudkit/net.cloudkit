<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2015. The CloudKit Open Source Project
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- Srping MVC配置 dispatcher-servlet -->

    <!-- classpath*:environment.properties, classpath*:META-INF/environment.properties, /WEB-INF/environment.properties -->
    <context:property-placeholder location="classpath*:environment.properties" ignore-resource-not-found="true" ignore-unresolvable="true" />

    <!-- Spring3.1之前的注解 HandlerMapping -->
    <!--
    # 把请求的URL映射到Controller的name上面
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"/>
    # 启动Spring MVC的注解功能，完成请求和注解POJO
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/>
    -->

    <!-- Spring3.1开始的版本，建议使用RequestMappingHandlerMapping和RequestMappingHandlerAdapter -->
    <!--把请求的URL映射到Controller的name上面 -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" />
    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO -->
    <!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" />-->

    <!-- Controller中添加Pageable参数 -->
    <mvc:annotation-driven>
        <mvc:argument-resolvers>
            <!-- page.page page.size -->
            <bean id="pageableHandlerMethodArgumentResolver" class="org.springframework.data.web.PageableHandlerMethodArgumentResolver"
                    p:maxPageSize="20"
                    p:oneIndexedParameters="true"
                    p:pageParameterName="page"
                    p:sizeParameterName="size" />
        </mvc:argument-resolvers>
    </mvc:annotation-driven>

    <!-- 扫描只符合 @Controller的类,禁用掉默认use-default-filters="false" -->
    <context:component-scan base-package="net.cloudkit.flowportal.interfaces" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
    </context:component-scan>

    <!-- 默认的Servlet来响应静态文件,容器默认的DefaultServletHandler处理所有静态内容与无RequestMapping处理的URL-->
    <!-- <mvc:default-servlet-handler default-servlet-name="defaultServlet"/> -->
    <mvc:default-servlet-handler />

    <!-- 定义无需Controller的url<->view直接映射 -->
    <!-- redirect:/default/ forward:/default/ />-->
    <!--<mvc:view-controller path="/" view-name="forward:/default" />-->
    <!-- 默认访问跳转到登录页面(即定义无需Controller的url<->view直接映射) -->
    <!-- <mvc:view-controller path="/user/*" view-name="redirect:/login"/> -->
    <!--<mvc:view-controller path="/" view-name="redirect:/index.html"/>-->

    <!-- *********************************************************************************************************** -->
    <!--  RESOURCE FOLDERS CONFIGURATION                                                                             -->
    <!--  Dispatcher configuration for serving static resources                                                      -->
    <!-- *********************************************************************************************************** -->
    <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources/ directory -->
    <!-- 使用<mvc:resources/>元素把/resources/**映射到/resources/ ResourceHttpRequestHandler进行处理 -->
    <mvc:resources location="/resources/" mapping="/resources/**" />

    <!-- 自定义拦截链配置 -->
    <!-- 切换语言拦截器 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**" />
            <!--<ref bean="localeChangeInterceptor"/>-->
            <bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />
            <!--
            <bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
                <property name="paramName" value="locale"/>
            </bean>
            -->
        </mvc:interceptor>

        <!-- 配置Shiro拦截器，实现注册用户的注入 -->
        <!--
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="net.cloudkit.legendfire.interfaces.account.web.interceptor.UserInterceptor"/>
        </mvc:interceptor>
        -->
        <!-- 配置Token拦截器，防止用户重复提交数据 -->
        <mvc:interceptor>
            <mvc:mapping path="/**" />
            <mvc:exclude-mapping path="/user/**" />
            <mvc:exclude-mapping path="/u/**" />
            <bean id="tokenInterceptor" class="net.cloudkit.flowportal.infrastructure.commons.TokenInterceptor" />
        </mvc:interceptor>
        <!--
        <mvc:interceptor>
            <mvc:mapping path="/admin/**" />
            <bean id="executeTimeInterceptor" class="net.cloudkit.workbench.infrastructure.common.ExecuteTimeInterceptor" />
        </mvc:interceptor>
        -->
        <mvc:interceptor>
            <mvc:mapping path="/admin/**" />
            <bean id="webContentInterceptor" class="org.springframework.web.servlet.mvc.WebContentInterceptor">
                <property name="cacheSeconds" value="0" />
            </bean>
        </mvc:interceptor>
    </mvc:interceptors>

    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <!-- 是否根据request path的扩展名进行选择mediaType,扩展名至mimeType的映射,即 /test.json -->
        <property name="favorPathExtension" value="true" />
        <!-- 是否根据参数选择medieType,用于开启 /test?format=json 的支持 -->
        <property name="favorParameter" value="false" />
        <property name="parameterName" value="format" />
        <!-- 是否忽略浏览器 AcceptHeader -->
        <property name="ignoreAcceptHeader" value="false" />
        <!-- 默认的content type -->
        <property name="defaultContentType" value="text/html" />
        <!--<property name="useJaf" value="false" />-->
        <!-- 媒体类型 -->
        <!-- 根据Http请求的header中的Accept属性的值来判读：Accept: application/xml 将返回xml格式数据, Accept: application/json 将返回json格式数据 -->
        <!-- 根据参数来判断 /test?format=json 将返回json数据 /test?format=xml 将返回xml数据 -->
        <!-- 根据扩展名来判断 test.xml 将返回xml格式数据 test.json 将返回json格式数据 test.html 将返回html格式数据 -->
        <!-- 扩展名到MIME的映射；favorPathExtension, favorParameter是true时起作用  -->
        <property name="mediaTypes">
            <!--
            <value>
                atom=application/atom+xml
                html=text/html
                json=application/json
                xml=application/xml
                *=*/*
            </value>
            -->
            <map>
                <entry key="html" value="text/html" />
                <entry key="xml" value="application/xml" />
                <entry key="json" value="application/json" />
                <entry key="jsonp" value="application/javascript" />
                <entry key="atom" value="application/atom+xml" />
                <entry key="rss" value="application/rss+xml" />
            </map>
        </property>
    </bean>

    <!-- 内容协商视图解析器；根据客户端不同的请求决定不同的view进行响应 -->
    <!-- 会自动根据解析的contentType来决定使用哪个视图解析器（默认使用整个web应用中的viewResolver） -->
    <!-- View resolvers can also be configured with ResourceBundles or XML files. If you need different view resolving based on Locale, you have to use the resource bundle resolver. -->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <!-- 视图渲染优先级，此处为0，优先渲染 -->
        <property name="order" value="0" />
        <!-- 内容协商管理器,用于决定 mediaTypes -->
        <property name="contentNegotiationManager" ref="contentNegotiationManager" />
        <property name="viewResolvers">
            <list>
                <!-- Bean name view resolver -->
                <bean class="org.springframework.web.servlet.view.BeanNameViewResolver" p:order="0" />

                <!-- Freemarker View Resolver -->
                <bean id="freemarkerViewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
                    <property name="order" value="1" />
                    <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView" />
                    <property name="contentType" value="text/html; charset=UTF-8" />
                    <property name="cache" value="true" />
                    <!-- <property name="templateLoaderPath" value="/WEB-INF/views/" /> 中已经指定了视图位置 -->
                    <!--<property name="prefix" value="${template.loader_path}" />-->
                    <!-- .ftl -->
                    <property name="suffix" value="${template.suffix}" />
                    <property name="requestContextAttribute" value="request" />
                    <property name="exposeSpringMacroHelpers" value="true" />
                    <property name="exposeRequestAttributes" value="true" />
                    <property name="exposeSessionAttributes" value="true" />
                    <property name="allowSessionOverride" value="true" />
                </bean>

                <!--
                &lt;!&ndash; 注册XmlViewResolver，用于iReport & JasperReports报表生成 &ndash;&gt;
                <bean id="jasperReportResolver" class="org.springframework.web.servlet.view.XmlViewResolver">
                    <property name="order" value="2" />
                    <property name="location">
                        <bean id="reportView" class="net.cloudkit.ecological.enterprises.infrastructure.jasperreports.JasperReportsCustomMultiFormatView">
                            &lt;!&ndash; <property name="url" value="/WEB-INF/reports/report2.jasper"/> &ndash;&gt;
                            <property name="reportDataKey" value="jrMainDataSource"/>
                        </bean>
                    </property>
                </bean>
                -->

                <!-- Jasper Reports View Resolver -->
                <bean id="jasperReportsViewResolver" class="org.springframework.web.servlet.view.jasperreports.JasperReportsViewResolver">
                    <!-- 视图渲染优先级，此处为1，优先于渲染JSP -->
                    <property name="order" value="2" />
                    <!-- 自定义视图渲染类，继承于JasperReportsMultiFormatView JasperReportsCustomMultiFormatView -->
                    <property name="viewClass" value="net.cloudkit.ecosystem.enterprises.infrastructure.jasperreports.JasperReportsMultiItemFormatView" />
                    <!-- 报表模板路径 -->
                    <!-- <property name="prefix" value="/WEB-INF/classes/reports/"/> -->
                    <property name="prefix" value="/WEB-INF/reports/" />
                    <!-- 模板后缀 -->
                    <property name="suffix" value=".jasper" />
                    <!-- 试图渲染所有以"-report"结尾的视图名(viewName) -->
                    <property name="viewNames" value="*-report" />
                    <!-- 缓存模板(false时，每次请求都会重新加载模板，建议debug模板时设置为false) -->
                    <property name="cache" value="false" />
                    <!-- 指定数据源 -->
                    <!--<property name="jdbcDataSource" ref="dataSource" />-->
                    <!--<property name="reportDataKey" value="datasource" />-->
                    <!-- 渲染时的相关参数 -->
                    <property name="exporterParameters">
                        <map>
                            <!-- HTML时的白色背景图片(px)路径 -->
                            <entry key="net.sf.jasperreports.engine.export.JRHtmlExporterParameter.IMAGES_URI" value="resources/images/" />
                            <entry key="net.sf.jasperreports.engine.export.JRHtmlExporterParameter.CHARACTER_ENCODING" value="UTF-8" />
                        </map>
                    </property>
                </bean>

                <!-- 定义视图,定义JSP文件的位置 -->
                <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                    <property name="order" value="3" />
                    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
                    <property name="contentType" value="text/html" />
                    <property name="prefix" value="/WEB-INF/views" />
                    <property name="suffix" value=".jsp" />
                    <property name="viewNames" value="*jsp" />
                </bean>
            </list>
        </property>
        <!-- 默认视图 放在解析链最后 -->
        <property name="defaultViews">
            <list>
                <!-- for application/json application/javascript -->
                <!-- org.springframework.web.servlet.view.json.MappingJackson2JsonView -->
                <!--
                <bean class="net.cloudkit.legendfire.interfaces.shared.web.common.MyMappingJackson2JsonView">
                    <property name="prettyPrint" value="false" />
                    <property name="disableCaching" value="false" />
                </bean>
                -->
                <!--<bean class="net.cloudkit.legendfire.interfaces.shared.web.common.MyMappingJackson2JsonpView"/>-->
                <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
                    <property name="prettyPrint" value="false" />
                    <property name="disableCaching" value="true" />
                    <property name="jsonpParameterNames">
                        <set>
                            <value>jsonp</value>
                            <value>callback</value>
                        </set>
                    </property>
                </bean>
            </list>
        </property>
    </bean>


    <mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
        <mvc:message-converters register-defaults="true">
            <!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8" />
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/plain;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
            <!-- 将Jackson2HttpMessageConverter的默认格式化输出设为true -->
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="objectMapper" ref="jacksonObjectMapper" />
                <!-- <property name="supportedMediaTypes" value="application/json"/> -->
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/plain;charset=UTF-8</value>
                        <value>test/html;charset=UTF-8</value>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
                <property name="prettyPrint" value="true"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <bean id="jacksonObjectMapper" class="net.cloudkit.flowportal.infrastructure.commons.CustomJacksonObjectMapper"/>

    <!--<bean id="castorMarshaller" class="org.springframework.oxm.castor.CastorMarshaller" />-->

    <!-- 国际化的消息资源文件 -->
    <!-- <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource" p:basename="i18n/messages"/> -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="defaultEncoding" value="UTF-8" />
        <property name="cacheSeconds" value="${message.cache_seconds}" />
        <property name="useCodeAsDefaultMessage" value="false" />
        <!-- locale -->
        <!--<property name="basename" value="${message.common_path}" />-->
        <property name="basenames">
            <list>
                <!-- 在web环境中一定要定位到classpath 否则默认到当前web应用下找 locale language i18n -->
                <!-- <value>classpath:i18n/message</value> <value>classpath:messages</value> <![CDATA[]]> -->
                <value>${message.common_path}</value>
                <!--<value>classpath:messages</value>-->
                <value>org/hibernate/validator/ValidationMessages</value>
            </list>
        </property>
    </bean>

    <!-- 将Controller抛出的异常转到特定View, 保持SiteMesh的装饰效果 -->
    <!-- Mapping exception to the handler view HandlerExceptionResolver -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <!--
        &lt;!&ndash; 配置多个statusCode &ndash;&gt;
        <property name="statusCodes">
            <props>
                <prop key="/error">500</prop>
                <prop key="/resource_not_found">404</prop>
            </props>
        </property>
        &lt;!&ndash; 设置日志输出级别，不定义则默认不输出警告等错误日志信息 &ndash;&gt;
        &lt;!&ndash; <property name="warnLogCategory" value="WARN"></property> &ndash;&gt;
        <property name="warnLogCategory" value="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver" />
        -->
        <property name="defaultErrorView" value="/error" />
        <property name="defaultStatusCode" value="500" />
        <!-- 定义异常处理页面用来获取异常信息的变量名，如果不添加exceptionAttribute属性，则默认为exception -->
        <property name="exceptionAttribute" value="exception"/>
        <property name="exceptionMappings">
            <props>
                <prop key="org.apache.shiro.authz.UnauthorizedException">/unauthorized</prop>
                <!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到/WEB-INF/jsp/error_fileupload.jsp页面 -->
                <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">/error</prop>
                <!--
                &lt;!&ndash; 参数绑定错误(如：必须参数没传递) &ndash;&gt;
                <prop key="org.springframework.web.bind.ServletRequestBindingException">/error</prop>
                &lt;!&ndash; 参数错误 &ndash;&gt;
                <prop key="java.lang.IllegalArgumentException">/error</prop>
                &lt;!&ndash; 参数类型有误 &ndash;&gt;
                <prop key="org.springframework.validation.BindException">/error</prop>
                &lt;!&ndash; 数据库错误 &ndash;&gt;
                <prop key="java.sql.SQLException">/error</prop>
                &lt;!&ndash; 其他错误为'未定义错误'(unknowError) &ndash;&gt;
                <prop key="java.lang.Exception">/error</prop>
                -->
                <!-- 处理其它异常(包括Controller抛出的) -->
                <prop key="java.lang.Throwable">/error</prop>
            </props>
        </property>
    </bean>

    <!-- zh_CN AcceptHeaderLocaleResolver -->
    <!-- 固定的locale,不能动态改变 -->
    <!--<bean id="localeResolver" class="org.springframework.web.servlet.i18n.FixedLocaleResolver" p:defaultLocale="${locale}" />-->

    <!-- 设置最大有效时间，如果是-1，则不存储，浏览器关闭后即失效，默认为Integer.MAX_INT-->
    <!-- 设置cookie可见的地址，默认是“/”即对网站所有地址都是可见的，如果设为其它地址，则只有该地址或其后的地址才可见-->
    <!--
    &lt;!&ndash; 基于Cookie的国际化实现 &ndash;&gt;
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver"
          p:cookieName="locale"
          p:cookieMaxAge="100000"
          p:cookiePath="/"
          p:defaultLocale="${locale}"/>
    -->
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver" p:defaultLocale="${locale}" />

    <!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->
    <!-- Configure the multipart resolver -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 默认编码 (ISO-8859-1) -->
        <property name="defaultEncoding" value="UTF-8" />
        <!-- 最大内存大小 (10240) -->
        <property name="maxInMemorySize" value="10240" />
        <!-- 上传临时目录名 (WebUtils#TEMP_DIR_CONTEXT_ATTRIBUTE) /attachments -->
        <property name="uploadTempDir" value="/attachments" />
        <!-- 最大文件大小，-1为无限止(-1) -->
        <!-- 指定所上传文件的总大小不能超过200KB。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->
        <!-- one of the properties available; the maximum file size in bytes -->
        <property name="maxUploadSize" value="200000" />
    </bean>

    <!--<mvc:annotation-driven />-->
    <mvc:annotation-driven validator="validator" />

    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
        <property name="validationMessageSource" ref="messageSource" />
    </bean>

</beans>
