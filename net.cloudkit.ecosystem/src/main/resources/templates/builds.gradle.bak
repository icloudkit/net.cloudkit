buildscript {

    ext {
        springBootVersion = '1.3.2.BUILD-SNAPSHOT'
    }

    repositories {

        // 下载 https://github.com/bmuschko/gradle-tomcat-plugin
        // flatDir dirs: "${gradle.gradleHomeDir}/customPlugins"

        // jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }

        // NOTE: You should declare only repositories that you need here
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.spring.io/release" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/snapshot" }
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:1.2.5'
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'idea'
apply plugin: 'eclipse'
// apply plugin: 'eclipse-wtp'
apply plugin: 'war'

// JAVA 应用
// apply plugin: 'application'
// apply plugin: 'java'

apply plugin: 'tomcat'
apply plugin: 'jetty'

// 包含gradle文件,引入jar包定义,定义的jar包可以直接在子项目中使用
apply from: 'libraries.gradle'

archivesBaseName = 'net.cloudkit.ecosystem'

// JVM 版本号要求
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

group 'net.cloudkit.ecosystem'
// 指定build输出目录和版本号 RELEASE SNAPSHOT
version = '1.0.0-' + buildVersion() + '-RELEASE'
// 默认为 build
// buildDir = "target"

//// 如果是 JAVA 应用 apply plugin: 'application' 才设置 Tasks installApp/run
//mainClassName = 'hello.HelloWorld'
//applicationDefaultJvmArgs = ["-Dgreeting.language=en"]
//// tag::jar[]
//jar {
//    baseName = 'net.cloudkit.ecosystem'
//    version =  '0.1.0'
//}
//// end::jar[]

// MANIFEST.MF 配置信息
war {
    manifest {
        /*
        MANIFEST.MF
        Manifest-Version: 1.0
        Implementation-Vendor: The Netty Project
        Implementation-Title: Netty/All-in-One
        Implementation-Version: 5.0.0.Alpha2
        Implementation-Vendor-Id: io.netty
        Built-By: norman
        Build-Jdk: 1.7.0_75
        Created-By: Apache Maven 3.2.3
        Archiver-Version: Plexus Archiver
        */
        attributes 'Implementation-Vendor': 'The CloudKit Project', 'Implementation-Title': 'Ecosystem/CloudKit', 'Implementation-Version': version, 'Implementation-Vendor-Id': 'net.cloudkit.ecosystem', 'Built-By': 'norman', 'Build-Jdk': '1.8.0_66', 'Created-By': 'Gradle 2.6', 'Archiver-Version': 'Plexus Archiver'
    }
}

// 设置 Project Facets
//eclipse {
//    wtp {
//        facet {
//            facet name: 'jst.web', type: Facet.FacetType.fixed
//            facet name: 'wst.jsdt.web', type: Facet.FacetType.fixed
//            facet name: 'jst.java', type: Facet.FacetType.fixed
//            facet name: 'jst.web', version: '3.0'
//            facet name: 'jst.java', version: '1.7'
//            facet name: 'wst.jsdt.web', version: '1.0'
//        }
//    }
//}

// 设置 WebApp 根目录
// webAppDirName = 'webapp'
// 设置 Java 源码所在目录
// sourceSets.main.java.srcDir 'src'

// 编译,生成JavaDoc和测试时注释的乱码问题
[compileJava, javadoc, compileTestJava]*.options*.encoding = 'UTF-8'

// GRADLE和IDEA集成时下载依赖源码和JavaDoc设置
idea {
    module {
        downloadJavadoc = false
        downloadSources = false
    }
}

sourceSets {
    main {
        // manifest.srcFile 'MANIFEST.MF'
        java.srcDirs = ['src/main/java']
        resources.srcDirs = ['src/main/resources']

        // 自定义Build 后main 的classes 目录或resources 目录的输出位置
        // output.resourcesDir = "${buildDir}/classes/main"
        // output.classesDir = "${buildDir}/classes/main"

        // output.resourcesDir = "src/main/webapp/WEB-INF/classes"
        // output.classesDir = "src/main/webapp/WEB-INF/classes"
    }
}

// tag::repositories[]
repositories {
    // mavenCentral()别名，表示依赖是从Central Maven 2 仓库中获取。
    // jcenter()别名，表示依赖是从Bintary’s JCenter Maven 仓库中获取。
    // mavenLocal()别名，表示依赖是从本地的Maven仓库中获取。

    mavenCentral()

    // maven { url 'http://download.java.net/maven/2/' }
    // maven { url 'http://10.33.1.216:8081/nexus/content/groups/public/' }
    // jcenter { url "http://jcenter.bintray.com/" }

    // maven { url 'http://maven.aliyun.com/nexus/content/repositories/central/' }
    maven { url 'http://maven.oschina.net/content/groups/public/' }

    // 配置Spring Maven仓库
    maven { url 'http://repo.spring.io/release/' }
    // maven { url 'http://repo.spring.io/milestone/' }
    // maven { url 'http://repo.spring.io/snapshot/' }

    // 带认证的库
    /*
    maven{
        credentials{
            username 'admin'
            password 'admin123'
        }
        url "http://localhost:8081/nexus/content/groups/public/"
    }
    */

    /*
    ivy {
        url "http://ivy.petrikainulainen.net/repo"
    }

    ivy {
        // URL can refer to a local directory
        url "../local-repo"
    }
    */

    // flatDir {
    //    dirs 'libs'
    // }

    // flatDir name: 'localRepository', dirs: 'libs'
    //// ${rootProject.projectDir} ${gradle.gradleHomeDir}
    // flatDir(dirs: '$projectDir/libs')
    // flatDir(dirs: '${rootProject.projectDir}/lib')
}
// end::repositories[]

configurations {

    // 需要忽略的包
    all*.exclude group: 'commons-httpclient'
    // 排除commons-logging依赖
    all*.exclude group: 'commons-logging'
    all*.exclude group: 'commons-beanutils', module: 'commons-beanutils'
}

// tag::dependencies[]
dependencies {

    // tomcat 插件的配置 tomcatVersion = '8.0.20' tomcatVersion = '7.0.59'
    def tomcatVersion = '8.0.26'
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}", "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }

    // 通用依赖
    compile(

            // logback
            libraries.'logback-core',
            libraries.'logback-classic',
            // 添加SLF4J-JCL依赖，将对JCL的日志API调用转换为对SLF4J接口的调用
            libraries.'jcl-over-slf4j',
            libraries.'log4j-over-slf4j',
            libraries.'jul-to-slf4j',
            // 添加SLF4J接口依赖
            libraries.'slf4j-api',
            libraries.'logback-ext-spring',

            // Guava工程包含了若干被Google的 Java项目广泛依赖 的核心库，例如：集合 [collections] 、缓存 [caching] 、原生类型支持 [primitives support] 、并发库 [concurrency libraries] 、通用注解 [common annotations] 、字符串处理 [string processing] 、I/O 等等。
            libraries.'guava'
    )

    // providedCompile 是在 war 插件下定义的
    providedCompile(
            // libraries.'javax.servlet-api',
            // libraries.'jsp-api',
            // libraries.'jstl'

            libraries.'javax.servlet-api',
            libraries.'javax.servlet.jsp-api',
            libraries.'javax.servlet.jsp.jstl-api',

    )

    // Core
    //compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-aop')
    //compile('org.springframework.boot:spring-boot-starter-jta-atomikos')
    //compile('org.springframework.boot:spring-boot-starter-jta-bitronix')
    compile('org.springframework.boot:spring-boot-starter-cache')
    compile('org.springframework.boot:spring-boot-devtools')
    compile('org.springframework.boot:spring-boot-starter-validation')
    compile('org.springframework.session:spring-session')
    compile('org.springframework.retry:spring-retry')
    compile('org.projectlombok:lombok:1.16.6')

    // Web
    compile('org.springframework.boot:spring-boot-starter-web')
    //compile('org.springframework.boot:spring-boot-starter-websocket')
    compile('org.springframework.boot:spring-boot-starter-ws')
    //compile('org.springframework.boot:spring-boot-starter-jersey')
    compile('io.ratpack:ratpack-spring-boot:1.1.1')
    compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile('org.springframework.boot:spring-boot-starter-hateoas')
    //compile('org.springframework.data:spring-data-rest-hal-browser')
    //compile('org.springframework.boot:spring-boot-starter-mobile')
    // REST Docs

    // Template Engines
    /*
    compile('org.springframework.boot:spring-boot-starter-freemarker')
    compile('org.springframework.boot:spring-boot-starter-velocity')
    compile('org.springframework.boot:spring-boot-starter-groovy-templates')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile('org.springframework.boot:spring-boot-starter-mustache')
    */

    // Data
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    //compile('org.springframework.boot:spring-boot-starter-jooq')
    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    // compile('org.springframework.boot:spring-boot-starter-data-cassandra')
    compile('org.springframework.boot:spring-boot-starter-redis')
    // compile('org.springframework.boot:spring-boot-starter-data-gemfire')
    // compile('org.springframework.boot:spring-boot-starter-data-solr')
    compile('org.springframework.boot:spring-boot-starter-data-elasticsearch')

    // Cloud Core
    /*
    compile('org.springframework.boot:spring-boot-starter-cloud-connectors')
    compile('org.springframework.cloud:spring-cloud-starter')
    compile('org.springframework.cloud:spring-cloud-starter-security')
    compile('org.springframework.cloud:spring-cloud-starter-oauth2')
    */

    // Cloud Config
    /*
    compile('org.springframework.cloud:spring-cloud-starter-config')
    compile('org.springframework.cloud:spring-cloud-config-server')
    compile('org.springframework.cloud:spring-cloud-starter-zookeeper-config')
    compile('org.springframework.cloud:spring-cloud-starter-consul-config')
    */

    // Cloud Discovery
    /*
    compile('org.springframework.cloud:spring-cloud-starter-eureka')
    compile('org.springframework.cloud:spring-cloud-starter-eureka-server')
    compile('org.springframework.cloud:spring-cloud-starter-zookeeper-discovery')
    compile('org.springframework.cloud:spring-cloud-cloudfoundry-discovery')
    compile('org.springframework.cloud:spring-cloud-starter-consul-discovery')
    */

    // Cloud Routing
    /*
    compile('org.springframework.cloud:spring-cloud-starter-zuul')
    compile('org.springframework.cloud:spring-cloud-starter-ribbon')
    compile('org.springframework.cloud:spring-cloud-starter-feign')
    */

    // Cloud Circuit Breaker
    /*
    compile('org.springframework.cloud:spring-cloud-starter-hystrix')
    compile('org.springframework.cloud:spring-cloud-starter-hystrix-dashboard')
    compile('org.springframework.cloud:spring-cloud-starter-turbine')
    compile('org.springframework.cloud:spring-cloud-starter-turbine-stream')
    */

    // Cloud Tracing
    /*
    compile('org.springframework.cloud:spring-cloud-starter-sleuth')
    compile('org.springframework.cloud:spring-cloud-starter-zipkin')
    */

    // Cloud Messaging
    /*
    compile('org.springframework.cloud:spring-cloud-starter-bus-amqp')
    compile('org.springframework.cloud:spring-cloud-starter-bus-redis')
    compile('org.springframework.cloud:spring-cloud-starter-bus-kafka')
    compile('org.springframework.cloud:spring-cloud-starter-consul-bus')
    compile('org.springframework.cloud:spring-cloud-starter-stream-rabbit')
    compile('org.springframework.cloud:spring-cloud-starter-stream-redis')
    compile('org.springframework.cloud:spring-cloud-starter-stream-kafka')
    */

    // Cloud AWS
    /*
    compile('org.springframework.cloud:spring-cloud-starter-aws')
    compile('org.springframework.cloud:spring-cloud-starter-aws-jdbc')
    compile('org.springframework.cloud:spring-cloud-starter-aws-messaging')
    */

    // Cloud Cluster
    /*
    compile('org.springframework.cloud:spring-cloud-cluster-redis')
    compile('org.springframework.cloud:spring-cloud-cluster-zookeeper')
    compile('org.springframework.cloud:spring-cloud-cluster-hazelcast')
    */

    // Social
    /*
    compile('org.springframework.boot:spring-boot-starter-social-facebook')
    compile('org.springframework.boot:spring-boot-starter-social-linkedin')
    compile('org.springframework.boot:spring-boot-starter-social-twitter')
    */

    // I/O
    //compile('org.springframework.boot:spring-boot-starter-batch')
    //compile('org.springframework.boot:spring-boot-starter-integration')
    //compile('org.activiti:activiti-spring-boot-starter-basic:5.19.0')
    //compile('org.springframework.boot:spring-boot-starter-artemis')
    //compile('org.springframework.boot:spring-boot-starter-hornetq')
    //compile('org.springframework.boot:spring-boot-starter-amqp')
    //compile('org.springframework.boot:spring-boot-starter-mail')

    // Ops
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-actuator-docs')
    //compile('org.springframework.boot:spring-boot-starter-remote-shell')

    // Database
    runtime('com.h2database:h2')
    runtime('org.hsqldb:hsqldb')
    runtime('org.apache.derby:derby')
    runtime('mysql:mysql-connector-java')
    runtime('org.postgresql:postgresql')

    // providedRuntime("org.springframework.boot:spring-boot-starter-jetty")
    // providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')

    // 测试依赖
    testCompile(
            libraries.'junit',
            libraries.'spring-test'
    )

    // 依赖mave库中不存在的jar,包含父项目的libs和当前项目的libs下的所有jar
    // 注意：这些libs目录是运行有子目录存在的
    // fileTree(dir: "${rootProject.projectDir}/libs", include: '*.jar')
    ext.jarTree = fileTree(dir: 'libs', include: '**/*.jar')
    ext.rootProjectLibs = new File(rootProject.rootDir, 'libs').getAbsolutePath()
    ext.jarTree += fileTree(dir: rootProjectLibs, include: '**/*.jar')
    compile jarTree
}
// end::dependencies[]

compileJava {
    options.debug = version.endsWith('SNAPSHOT')
}

tasks.withType(JavaCompile) { options.encoding = "UTF-8" }

tasks.withType(GroovyCompile) { groovyOptions.encoding = "MacRoman" }

/*
task hello << {
    println 'hello world!'
}
*/

// 显示项目下所有"compile jar".
/*
task listJars(description: '#Display all compile jars.') << {
    println description
    configurations.compile.each { File file -> println file.name }
}
*/

task createJavaProject << {
    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}

task createWebProject(dependsOn: 'createJavaProject') << {
    def webAppDir = file("$webAppDirName")
    webAppDir.mkdirs()
}

/*
task createJar(type: org.gradle.api.tasks.bundling.Jar, dependsOn: ["test"]) {
    version = 0.1
    archiveName = "net.cloudkit.ecological.enterprises-${version}.jar"
    manifest {
        attributes 'Main-Class': 'net.cloudkit.xxxx.Main'
    }
    from(sourceSets.main.output.classesDir)
}


// create a single Jar with all dependencies

task fatJar(type: Jar) {
    version = 0.1
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example', 'Implementation-Version': version, 'Main-Class': ''
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task copyJars(type: Copy) {
    from configurations.runtime
    // 目标位置
    into 'dist'
}
*/

def buildVersion() {
    // yyyyMMddHHmmss
    return 'v' + new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
    // return new Date().getTime();
}


task copyJars(type: Copy) {
    from configurations.runtime
    // 目标位置
    into 'src/main/webapp/WEB-INF/lib'
}

task production << {
    bootRun.systemProperty 'spring.profiles.active', 'production'
}

task development << {
    bootRun.systemProperty 'spring.profiles.active', 'development'
}

// tag::wrapper[]
// 如果你想配置你自己制定的Gradle 版本，加入以下配置，然后在导入工程时选择 use customizable gradle wrapper
task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}
// end::wrapper[]

// tomcat 插件的配置
tomcat {
    httpPort = 8080
    httpsPort = 8443
    enableSSL = true
    ajpPort = 8009
    stopPort = 8090
    stopKey = 'killTomcat'
//    contextPath = 'sample-app'
//    users {
//        user {
//            username = 'user1'
//            password = '123456'
//            roles = ['developers', 'admin']
//        }
//
//        user {
//            username = 'user2'
//            password = 'abcdef'
//            roles = ['manager']
//        }
//    }
}

tomcatRun {
    contextPath = '/cloudkit'
    URIEncoding = 'UTF-8'
    reloadable = 'true'
}

/*
<?xml version="1.0" encoding="UTF-8"?>
<Context>
    <Resource name="jdbc/mydatabase"
              auth="Container"
              type="javax.sql.DataSource"
              username="superuser"
              password="secretpasswd"
              driverClassName="com.mysql.jdbc.Driver"
              url="jdbc:mysql://localhost:3306/mydb"
              validationQuery="select 1"
              maxActive="10"
              maxIdle="4"/>
</Context>
*/
//[tomcatRun, tomcatRunWar]*.configFile = file('context.xml')

// jetty启动配置
// Gradle Jetty配置范例和如何指定webdefault.xml,指定webdefault.xml是为了解决在Windows下静态文件锁定的问题

// [jettyRun, jettyRunWar,jettyStop]*.with {
//     webDefaultXml = file("${rootDir}/webdefault.xml")
// }

jettyRun {
    httpPort = 8080
    stopPort = 8010
    stopKey = 'killJetty'
    contextPath = '/cloudkit'
    // reload = 'manual'
    reload = 'automatic'
    scanIntervalSeconds = 1
    // file('${rootDir}/webdefault.xml')
    // webDefaultXml = file('webdefault.xml')
}

